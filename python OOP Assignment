Q1- What is the purpose of Python's OOP?
A1-OOP-object oriented programming:
   it is a programming approach based on classes and objects. in simple languagge, OOP is the method to represent the "real world entity" in programming.
   OOP features- class and objects, inhertance,polymorphism,encapsulation,abstraction.
Q2-Where does an inheritance search look for an attribute?
A2-An inheritance search looks for an attribute first in the instance object, then in the class the instance was created from, 
then in all higher superclasses, progressing from left to right (by default). The search stops at the first place the attribute is found.

Q3- How do you distinguish between a class object and an instance object?
A3-A Class defines the structure, property, and behaviour of an Object. You can think of a Class as a blueprint.
An Object is created from a Class, like a house is created from a blueprint.
Instance − An individual object of a certain class.
Q4- What makes the first argument in a class’s method function special?
A4- Generally, when we call a method with some arguments, the corresponding class function is called by placing the method's object before the first argument. 
So, anything like obj.meth(args) becomes Class.meth(obj, args). The calling process is automatic while the receiving process is not (its explicit).
This is the reason the first parameter of a function in class must be the object itself.
Q5-What is the purpose of the init method.
A5- The __init__ method is a special method in Python classes that is used to initialize an object when it is created. 
It is also known as a constructor method.The primary purpose of the __init__ method is to set the initial state of an object by initializing its instance variables or attributes.
It takes self as its first parameter, which refers to the object being created, and can also take additional parameters that are used to set the values of the object's attributes.
Q6-What is the process for creating a class instance?
A6-The process for creating a class instance in python involves the following steps:
   a-Define a class: First, define a class using the class keyword, and specify the attributes and methods that the class should have.
   b-Instantiate the class: To create an instance of the class, call the class using parentheses, passing any necessary arguments to the __init__ method (if it has one) to initialize the object's attributes. This creates a new instance of the class, which is stored in a variable.
Q7-What is the process for creating a class?
A7-creating a class in Python involves defining the class, defining its attributes and methods, and then instantiating the class to create instances of the class.
Q8-How would you define the superclasses of a class?
A8-In object-oriented programming, the superclass of a class is the class that it inherits from, also known as its parent class. 
The subclass (or child class) inherits all the attributes and methods of its superclass and can add its own unique attributes and methods.
Q9-What is the relationship between classes and modules?
A9-modules and classes serve different purposes, but they can work together to help you organize and reuse code in a program or system.
Q10-How do you make instances and classes?
A10-to create instances of a class, you need to define the class first, and then create instances of it by calling the class with the required arguments.
Once you have an instance of the class,you can access its instance variables and methods using dot notation.
Q11-Where and how should be class attributes created?
A11-Class attributes in Python should be created inside the class definition, but outside any of the class methods. 
This means that they are defined directly inside the class body.
Q12-Where and how are instance attributes created?
A12-Instance attributes in Python are created inside the class's methods, typically the __init__ method, using the self parameter to refer to the current instance.
Q13- What does the term "self" in a Python class mean?
A13-In Python, self is a reference to the instance of the class that a method is being called on. 
It is a convention in Python to use self as the name of the first parameter of instance methods.When a method is called on an instance of a class, 
self is automatically passed as the first parameter to the method. This allows the method to access and modify the attributes of the instance.
Q14-How does a Python class handle operator overloading?
A14-Python classes can define their own behavior for built-in operators by overloading them. 
This is called operator overloading, and it allows you to define how instances of your class behave with respect to built-in operators.
Q15-When do you consider allowing operator overloading of your classes?
A15-You should consider allowing operator overloading of your classes when you want to provide a natural and intuitive way for users of your class to work with instances of your class using built-in operators.
Q16-What is the most popular form of operator overloading?
A16-In programming languages that support operator overloading, the most popular form of operator overloading is probably arithmetic operator overloading. 
This allows programmers to define how the standard arithmetic operators, such as +, -, *, and /, work with user-defined types.
Q17-What are the two most important concepts to grasp in order to comprehend Python OOP code?
A17-1- Class and objects,2-inheritance and polymorphism.
Q18-Describe three applications for exception processing.
A18-Error Handling: Exception processing is often used for error handling in programs.
By using exception handling mechanisms, developers can write code that gracefully handles errors and recovers from them, 
rather than crashing the program. For example, if a file cannot be found or opened, 
an exception can be thrown and caught to provide an appropriate error message to the user.

Input Validation: Exception processing can also be used for input validation. When accepting input from users, 
it is important to ensure that the input is valid and meets certain requirements. By using exception handling mechanisms, 
developers can check for input validity and provide appropriate feedback to the user if the input is invalid. For example, 
if a user enters an invalid email address, an exception can be thrown and caught to prompt the user to correct their input.

Resource Management: Exception processing can also be used for managing resources in programs. When working with resources such as files,
database connections, or network sockets, it is important to ensure that these resources are properly acquired, used, and released.
By using exception handling mechanisms, developers can ensure that resources are properly cleaned up in case of errors or exceptions. 
For example, if a database connection cannot be established,
an exception can be thrown and caught to ensure that any previously acquired resources are properly released before the program exits.
Q19-What happens if you don't do something extra to treat an exception?
A19-If an exception is not properly handled in a program, it will cause the program to terminate and display an error message to the user. 
This can disrupt the user's experience and may leave the program in an inconsistent state. Additionally, 
any resources that were acquired by the program may not be properly released, which can lead to data corruption or other issues. To avoid these problems,
it is important to properly handle exceptions using try-except blocks and release any resources that were acquired before the exception occurred.
Q20-. What are your options for recovering from an exception in your script?
A20-1-Catch the exception
    2-retry the operation
    3-handle the Error And continue
    4-Graceful termination
 Q21-   



